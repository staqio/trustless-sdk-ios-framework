// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TrustlessSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Foundation
import LocalAuthentication
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class Transfer : Swift.Codable {
  public var transferId: Swift.Int
  public var type: TrustlessSDK.TransferType
  public var transferType: Swift.String
  public var transferNote: Swift.String
  public var timestamp: Swift.String?
  public var status: TrustlessSDK.TransferStatus
  public var localCurrencyAmount: Swift.Double
  public var exchangeRate: Swift.Int
  public var transferCurrency: Swift.String
  public var transferAmount: Swift.Double
  public var chargeType: TrustlessSDK.TransferChargeType
  public var beneficiary: TrustlessSDK.TransferBeneficiary
  public var fees: TrustlessSDK.TransferFee
  public var requiredDocuments: TrustlessSDK.TransferRequiredDocuments
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum TransferType : Swift.String, Swift.Codable {
  case standing
  case saved
  case transfer
  case goal
  case all
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct TransferStatus : Swift.Codable {
  public var id: Swift.Int
  public var code: Swift.String
  public var name: Swift.String
  public var label: Swift.String
  public var labelAr: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TransferChargeType : Swift.Codable {
  public var chargeTypeId: Swift.Int
  public var chargeTypeCode: Swift.String
  public var chargeTypeName: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TransferBeneficiary : Swift.Codable {
  public var name: Swift.String
  public var alias: Swift.String?
  public var account: Swift.String
  public var address: Swift.String
  public var bankCode: Swift.String
  public var bankCountry: Swift.String
  public var type: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TransferFee : Swift.Codable {
  public var amount: Swift.Double
  public var currency: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TransferRequiredDocuments : Swift.Codable {
  public var requiredDocumentCount: Swift.Int
  public var requiredDocumentsList: [Swift.String]
  public var requiredDocumentsListAr: [Swift.String]
  public var isDocumentsRequired: [Swift.Bool?]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TransferRequiredDocument : Swift.Codable {
  public var label: Swift.String
  public var labelAr: Swift.String
  public var required: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardHiddenData : Swift.Codable {
  public var token: Swift.String
  public var pan: Swift.String
  public var cvv: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum CardSpendingLimitType : Swift.String, Swift.Codable {
  case cash
  case eCommerce
  public static let cashRawValues: [Swift.String]
  public static let eCommerceRawValues: [Swift.String]
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SetCardSpendingParams : Swift.Codable {
  public var period: TrustlessSDK.CardSpendingLimitPeriod
  public var type: TrustlessSDK.CardSpendingLimitType?
  public var limit: Swift.Double
  public var status: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol KYCUrlFieldProtocol : TrustlessSDK.KYCGeneralFieldProtocol {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class KYCUrlField : TrustlessSDK.KYCGenericField<Swift.String>, TrustlessSDK.KYCUrlFieldProtocol {
  override public func getStringValue() -> Swift.String?
  @objc deinit
}
public protocol KYCBooleanFieldProtocol : TrustlessSDK.KYCGeneralFieldProtocol {
  var webviewUrl: Swift.String? { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class KYCBooleanField : TrustlessSDK.KYCGenericField<Swift.Bool>, TrustlessSDK.KYCBooleanFieldProtocol {
  public var webviewUrl: Swift.String? {
    get
  }
  override public func getStringValue() -> Swift.String?
  @objc deinit
}
public struct CliQPurposeCode : Swift.Codable {
  public var purposeCode: Swift.String
  public var purposeCodeLabelAr: Swift.String
  public var purposeCodeLabelEn: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreatedCliqAlias : Swift.Codable {
  public var alias: Swift.String
  public var iban: Swift.String
  public var isDefault: Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetAccountTransactionsParams : Swift.Codable {
  public var dateTo: Swift.String?
  public var dateFrom: Swift.String?
  public init(dateTo: Foundation.Date? = nil, dateFrom: Foundation.Date? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct KYCFieldValidationError {
  public var messageEn: Swift.String
  public var messageAr: Swift.String
}
public protocol KYCBaseFieldProtocol {
  var code: Swift.String { get set }
  var isMandatory: Swift.Bool { get set }
  var error: TrustlessSDK.KYCFieldValidationError? { get set }
  var type: TrustlessSDK.KYCFieldType { get }
  var defaultValue: TrustlessSDK.KYCFieldValue? { get }
  var isRequired: Swift.Bool { get }
  var label: Swift.String { get }
  var sortOrder: Swift.Int { get }
  var source: Swift.String { get }
  var dependentFields: [Swift.String] { get }
  var requiredWhen: [TrustlessSDK.KYCFieldDependency] { get }
  var sourceFieldKey: Swift.String { get }
  var sdkMapping: [Swift.String : Swift.String] { get }
  var isDocument: Swift.Bool { get }
  var isDocumentFromSDK: Swift.Bool { get }
  var isDocumentField: Swift.Bool { get }
  var name: Swift.String { get }
  func validate() -> TrustlessSDK.KYCFieldValidationError?
  func updateMandatoryStatus(modifiedField: any TrustlessSDK.KYCBaseFieldProtocol) -> Swift.Bool
  func getStringValue() -> Swift.String?
  func getJsonValue() -> Any?
  func putValue(value: Any?)
  func clearValue()
  func putError(error: TrustlessSDK.KYCFieldValidationError)
  func clearError() -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class KYCBaseField : TrustlessSDK.KYCBaseFieldProtocol {
  public var code: Swift.String
  public var isMandatory: Swift.Bool
  public var error: TrustlessSDK.KYCFieldValidationError?
  public var type: TrustlessSDK.KYCFieldType {
    get
  }
  public var defaultValue: TrustlessSDK.KYCFieldValue? {
    get
  }
  public var isRequired: Swift.Bool {
    get
  }
  public var label: Swift.String {
    get
  }
  public var sortOrder: Swift.Int {
    get
  }
  public var source: Swift.String {
    get
  }
  public var dependentFields: [Swift.String] {
    get
  }
  public var requiredWhen: [TrustlessSDK.KYCFieldDependency] {
    get
  }
  public var sourceFieldKey: Swift.String {
    get
  }
  public var sdkMapping: [Swift.String : Swift.String] {
    get
  }
  public var isDocument: Swift.Bool {
    get
  }
  public var isDocumentFromSDK: Swift.Bool {
    get
  }
  public var isDocumentField: Swift.Bool {
    get
  }
  public var name: Swift.String {
    get
  }
  public func validate() -> TrustlessSDK.KYCFieldValidationError?
  public func updateMandatoryStatus(modifiedField: any TrustlessSDK.KYCBaseFieldProtocol) -> Swift.Bool
  public func getStringValue() -> Swift.String?
  public func getJsonValue() -> Any?
  public func putValue(value: Any?)
  public func clearValue()
  public func putError(error: TrustlessSDK.KYCFieldValidationError)
  public func clearError() -> Swift.Bool
  @objc deinit
}
public protocol AccountsProvider {
  func createAccount(currency: Swift.String, name: Swift.String, completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.AccountDetails>) -> TrustlessSDK.CancelCallback
  func getAccount(_ accountNumber: Swift.String, completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.AccountDetails>) -> TrustlessSDK.CancelCallback
  func closeAccount(_ accountNumber: Swift.String, creditAccountNumber: Swift.String?, completion: @escaping TrustlessSDK.ResultCallback<Swift.Void>) -> TrustlessSDK.CancelCallback
  func getAccountsPaginator(pageSize: Swift.Int?) -> TrustlessSDK.Paginator<TrustlessSDK.Account>
  func getAccountTransactionsPaginator(_ accountNumber: Swift.String, pageSize: Swift.Int?, params: TrustlessSDK.GetAccountTransactionsParams?) -> TrustlessSDK.Paginator<TrustlessSDK.AccountTransfer>
}
public struct CreateCliQTransferParams {
  public init(customerAccount: Swift.String, beneficiaryAliasType: TrustlessSDK.CliQAliasType, beneficiaryAlias: Swift.String, amount: Swift.Double, purposeCode: Swift.String, currencyCode: Swift.String, transferNote: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol SimulateProviderProtocol {
  func approveKyc(_ completion: @escaping TrustlessSDK.ResultCallback<Swift.Void>) -> TrustlessSDK.CancelCallback
  func setAccountBalance(_ accountNumber: Swift.String, balance: Swift.Float, completion: @escaping TrustlessSDK.ResultCallback<Swift.Void>) -> TrustlessSDK.CancelCallback
}
public struct UpdateUserProfileParams {
  public init(firstName: Swift.String? = nil, lastName: Swift.String? = nil, phoneNumber: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct Customer : Swift.Codable {
  public var name: Swift.String
  public var fullName: Swift.String
  public var type: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol AuthProvider {
  func signIn(username: Swift.String, password: Swift.String, completion: @escaping TrustlessSDK.ResultCallback<Swift.Void>) -> TrustlessSDK.CancelCallback
  func signIn(username: Swift.String, password: Swift.String, withBiometry: Swift.Bool, completion: @escaping TrustlessSDK.ResultCallback<Swift.Void>) -> TrustlessSDK.CancelCallback
  func signOut(_ completion: @escaping TrustlessSDK.ResultCallback<Swift.Void>) -> TrustlessSDK.CancelCallback
  func registerUser(with params: TrustlessSDK.CreateUserParams, completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.RegisteredUser>) -> TrustlessSDK.CancelCallback
  func requestPasswordReset(email: Swift.String, completion: @escaping TrustlessSDK.ResultCallback<Swift.Void>) -> TrustlessSDK.CancelCallback
  func confirmPasswordReset(email: Swift.String, code: Swift.String, newPassword: Swift.String, completion: @escaping TrustlessSDK.ResultCallback<Swift.Void>) -> TrustlessSDK.CancelCallback
}
public enum CardSpendingLimitPeriod : Swift.String, Swift.Codable {
  case daily
  case weekly
  case monthly
  case annually
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SetCardSpendingLimitParams {
  public init(period: TrustlessSDK.CardSpendingLimitPeriod, cashLimit: Swift.Double? = nil, eCommerceLimit: Swift.Double? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol CardsProvider {
  func createCard(_ params: TrustlessSDK.CreateCardParams, completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.Card>) -> TrustlessSDK.CancelCallback
  func getCardDetails(_ cardToken: Swift.String, completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.Card>) -> TrustlessSDK.CancelCallback
  func getCardHiddenData(_ cardToken: Swift.String, showCVV: Swift.Bool, completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.CardHiddenData>) -> TrustlessSDK.CancelCallback
  func setCardStatus(_ cardToken: Swift.String, status: TrustlessSDK.CardStatus, completion: @escaping TrustlessSDK.ResultCallback<Swift.Void>) -> TrustlessSDK.CancelCallback
  func setMobileNumber(_ cardToken: Swift.String, mobileNumber: Swift.String, completion: @escaping TrustlessSDK.ResultCallback<Swift.Void>) -> TrustlessSDK.CancelCallback
  func getCardBalance(_ cardToken: Swift.String, completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.CardBalance>) -> TrustlessSDK.CancelCallback
  func topUpCard(_ cardToken: Swift.String, params: TrustlessSDK.CardManageFundsParams, completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.CardBalance>) -> TrustlessSDK.CancelCallback
  func withdrawalFromCard(_ cardToken: Swift.String, params: TrustlessSDK.CardManageFundsParams, completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.CardBalance>) -> TrustlessSDK.CancelCallback
  func getCardSpendingLimits(_ cardToken: Swift.String, completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.CardSpendingLimits>) -> TrustlessSDK.CancelCallback
  func setCardSpendingLimits(_ cardToken: Swift.String, params: TrustlessSDK.SetCardSpendingLimitParams, completion: @escaping TrustlessSDK.ResultCallback<[TrustlessSDK.SetCardSpendingParams]>) -> TrustlessSDK.CancelCallback
  func getCardsPaginator(pageSize: Swift.Int?, onlyActiveCards: Swift.Bool) -> TrustlessSDK.Paginator<TrustlessSDK.Card>
  func getCardTransactionsPaginator(_ cardToken: Swift.String, pageSize: Swift.Int?, params: TrustlessSDK.GetCardTransactionsParams) -> TrustlessSDK.Paginator<TrustlessSDK.CardTransaction>
}
public protocol UserProvider {
  func getProfile(_ completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.UserProfile>) -> TrustlessSDK.CancelCallback
  func updateProfile(with params: TrustlessSDK.UpdateUserProfileParams, completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.UserProfile>) -> TrustlessSDK.CancelCallback
  func updatePassword(currentPassword: Swift.String, newPassword: Swift.String, completion: @escaping TrustlessSDK.ResultCallback<Swift.Void>) -> TrustlessSDK.CancelCallback
}
public struct AccountDetails : Swift.Codable {
  public var branch: Swift.String
  public var number: Swift.String
  public var type: Swift.String
  public var name: Swift.String
  public var bankName: Swift.String
  public var customer: TrustlessSDK.Customer
  public var currencyCode: Swift.String
  public var noDebit: Swift.Bool
  public var noCredit: Swift.Bool
  public var dormant: Swift.Bool
  public var iban: Swift.String
  public var swift: Swift.String
  public var currentBalance: Swift.Float
  public var localCurrencyCurrentBalance: Swift.Float
  public var availableBalance: Swift.Float
  public var blockedAmount: Swift.Float
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct KYCCityValue : Swift.Codable {
  public var countryCode: Swift.String
  public var stateCode: Swift.String
  public var stateName: Swift.String
  public var cityAr: Swift.String
  public var city: Swift.String
  public var id: Swift.Int
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreateUserParams {
  public init(email: Swift.String, username: Swift.String, password: Swift.String, firstName: Swift.String, lastName: Swift.String, phoneNumber: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum CardStatus : Swift.String, Swift.CaseIterable {
  case activated
  case frozen
  case closed
  public init?(rawValue: Swift.String)
  public typealias AllCases = [TrustlessSDK.CardStatus]
  public typealias RawValue = Swift.String
  public static var allCases: [TrustlessSDK.CardStatus] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct CardSpendingLimits : Swift.Codable {
  public var daily: TrustlessSDK.CardSpendingLimitGroup
  public var weekly: TrustlessSDK.CardSpendingLimitGroup
  public var monthly: TrustlessSDK.CardSpendingLimitGroup
  public var annually: TrustlessSDK.CardSpendingLimitGroup
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardSpendingLimitGroup : Swift.Codable {
  public var cash: TrustlessSDK.CardSpendingLimit
  public var eCommerce: TrustlessSDK.CardSpendingLimit
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardSpendingLimit : Swift.Codable {
  public var limit: Swift.Double
  public var transactionCountLimit: Swift.Int
  public var transactionAmountLimit: Swift.Double
  public var remainingAmount: Swift.Double?
  public var remainingCount: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreateInternalTransferParams {
  public init(customerAccount: Swift.String, beneficiaryAccount: Swift.String, amount: Swift.Double, currencyCode: Swift.String, transferNote: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct CardManageFundsParams {
  public init(accountNumber: Swift.String, amount: Swift.Double, currency: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct KYCSelectFieldValue {
  public var label: Swift.String
  public var value: Swift.String
  public init(label: Swift.String, value: Swift.String)
}
public protocol KYCSelectFieldProtocol : TrustlessSDK.KYCGeneralFieldProtocol {
  var optionsEn: [TrustlessSDK.KYCSelectFieldValue] { get }
  var optionsAr: [TrustlessSDK.KYCSelectFieldValue] { get }
  func getOption(withValue: Swift.String) -> TrustlessSDK.KYCSelectFieldValue?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class KYCSelectField : TrustlessSDK.KYCGenericField<Swift.String>, TrustlessSDK.KYCSelectFieldProtocol {
  public var optionsEn: [TrustlessSDK.KYCSelectFieldValue] {
    get
  }
  public var optionsAr: [TrustlessSDK.KYCSelectFieldValue] {
    get
  }
  override public func getStringValue() -> Swift.String?
  public func getOption(withValue value: Swift.String) -> TrustlessSDK.KYCSelectFieldValue?
  @objc deinit
}
public struct RegisteredUser : Swift.Codable {
  public let id: Swift.String
  public let username: Swift.String
  public let email: Swift.String
  public let firstName: Swift.String
  public let lastName: Swift.String
  public let phoneNumber: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CardTransaction : Swift.Codable {
  public var id: Swift.String
  public var type: Swift.String
  public var status: Swift.String
  public var date: Swift.String
  public var description: Swift.String
  public var transactionCurrency: Swift.String
  public var transactionCurrencySymbol: Swift.String
  public var transactionAmount: Swift.Double
  public var cardCurrencyISO: Swift.String
  public var cardCurrency: Swift.String
  public var cardCurrencyAmount: Swift.Double
  public var fees: Swift.Double
  public var availableBalance: Swift.Double
  public var postedAmount: Swift.Double
  public var blockedAmount: Swift.Double
  public var pendingAmount: Swift.Double
  public var note: Swift.String
  public var debitCreditIndicator: Swift.String
  public var mcc: Swift.String?
  public var merchantName: Swift.String?
  public var merchantCity: Swift.String?
  public var merchantCountry: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum TrustlessError : Swift.Error {
  case notInitialized
  case clientCertificateIsNotProvided
  case notLoggedIn
  case tokenUnavailable
  case kycNotFinished
  case reloginRequired
  case server(code: Swift.String, message: Swift.String)
  case fileError(error: any Swift.Error)
  case timeout
  case cancelled
  case encoding
  case decoding
  case unexpected
  case unexpectedServerResponse
  case localAuthentication(description: Swift.String)
}
public enum KYCStepStructuredField {
  case object(any TrustlessSDK.KYCBaseFieldProtocol)
  case dictionary([Swift.String : any TrustlessSDK.KYCBaseFieldProtocol])
}
public protocol KYCFormStepDelegate : AnyObject {
  func didUpdateDependentFields(stepManager: any TrustlessSDK.KYCFormStepManagerProtocol)
  func didReceiveValidationError(stepManager: any TrustlessSDK.KYCFormStepManagerProtocol)
}
public protocol KYCFormStepManagerProtocol : TrustlessSDK.KYCStepManagerProtocol {
  var delegate: (any TrustlessSDK.KYCFormStepDelegate)? { get set }
  var fields: [any TrustlessSDK.KYCBaseFieldProtocol] { get }
  var mandatoryFields: [any TrustlessSDK.KYCBaseFieldProtocol] { get }
  var documentFields: [any TrustlessSDK.KYCBaseFieldProtocol] { get }
  func getField(withCode code: Swift.String) -> (any TrustlessSDK.KYCBaseFieldProtocol)?
  func getField(withName name: Swift.String) -> (any TrustlessSDK.KYCBaseFieldProtocol)?
  func configureSourceFields(_ sourceFields: [Swift.String : Swift.String])
  func validate() -> [Swift.String : TrustlessSDK.KYCFieldValidationError]?
  func getJson() -> Swift.String?
}
public protocol TransfersProvider {
  func getTransfersPaginator(pageSize: Swift.Int?, type: TrustlessSDK.TransferType) -> TrustlessSDK.Paginator<TrustlessSDK.Transfer>
  func getTransfersPaginator(pageSize: Swift.Int?, type: TrustlessSDK.TransferType, params: TrustlessSDK.GetTransfersParams?) -> TrustlessSDK.Paginator<TrustlessSDK.Transfer>
  func getTransferDetails(_ transferId: Swift.Int, completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.Transfer>) -> TrustlessSDK.CancelCallback
  func createInternalTransfer(params: TrustlessSDK.CreateInternalTransferParams, completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.Transfer>) -> TrustlessSDK.CancelCallback
  func createCliQTransfer(params: TrustlessSDK.CreateCliQTransferParams, completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.Transfer>) -> TrustlessSDK.CancelCallback
  func getCliQTransfersPurposeCodes(aliasType: TrustlessSDK.CliQAliasType, completion: @escaping TrustlessSDK.ResultCallback<[TrustlessSDK.CliQPurposeCode]>) -> TrustlessSDK.CancelCallback
  func getCliQTransfersPurposeCodes(aliasType: TrustlessSDK.CliQAliasType, alias: Swift.String?, completion: @escaping TrustlessSDK.ResultCallback<[TrustlessSDK.CliQPurposeCode]>) -> TrustlessSDK.CancelCallback
  func confirmTransfer(_ transferId: Swift.Int, files: [Swift.String : TrustlessSDK.TrustlessFile], completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.Transfer>) -> TrustlessSDK.CancelCallback
}
public protocol TrustlessSDKProtocol {
  var isCustomer: Swift.Bool { get }
  var authProvider: any TrustlessSDK.AuthProvider { get }
  var userProvider: any TrustlessSDK.UserProvider { get }
  var kycProvider: any TrustlessSDK.KYCProvider { get }
  var accountsProvider: any TrustlessSDK.AccountsProvider { get }
  var cardsProvider: any TrustlessSDK.CardsProvider { get }
  var simulateProvider: any TrustlessSDK.SimulateProviderProtocol { get }
  var transfersProvider: any TrustlessSDK.TransfersProvider { get }
  var cliQProvider: any TrustlessSDK.CliQProvider { get }
  func initialize(clientId: Swift.String, clientSecret: Swift.String)
  func configureClientCertificate(resourceName: Swift.String, password: Swift.String)
}
public let TrustlessSDK: any TrustlessSDK.TrustlessSDKProtocol
public struct TrustlessFile {
  public var data: Foundation.Data
  public var mimeType: Swift.String
  public init(data: Foundation.Data, mimeType: Swift.String = "application/octet-stream")
}
public struct Account : Swift.Codable {
  public var branch: Swift.String
  public var number: Swift.String
  public var type: Swift.String
  public var name: Swift.String
  public var bankName: Swift.String
  public var customer: TrustlessSDK.Customer
  public var currencyCode: Swift.String
  public var noDebit: Swift.Bool
  public var noCredit: Swift.Bool
  public var dormant: Swift.Bool
  public var iban: Swift.String
  public var swift: Swift.String
  public var currentBalance: Swift.Float
  public var localCurrencyCurrentBalance: Swift.Float
  public var availableBalance: Swift.Float
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct KYCStatus : Swift.Codable {
  public var kycId: Swift.Int
  public var customerId: Swift.String?
  public var statusCode: Swift.String
  public var status: Swift.String
  public var statusAr: Swift.String
  public var active: Swift.Bool
  public var documents: [TrustlessSDK.KYCStatusDocument]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct KYCStatusDocument : Swift.Codable {
  public var name: Swift.String
  public var documentCode: Swift.String
  public var approved: Swift.Bool
  public var reason: Swift.String
  public var reasonAr: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol KYCStepManagerProtocol {
  var code: Swift.String { get }
  var title: Swift.String { get }
}
@_hasMissingDesignatedInitializers open class KYCStepManager : TrustlessSDK.KYCStepManagerProtocol {
  public var code: Swift.String {
    get
  }
  public var title: Swift.String {
    get
  }
  @objc deinit
}
public protocol KYCStepsManagerProtocol {
  var steps: [TrustlessSDK.KYCStepManager] { get }
  func configureSourceFields(_ sourceFields: [Swift.String : Swift.String])
  func getJson() -> Swift.String?
  func getProofDocuments() -> [Swift.String : Foundation.URL]?
}
public protocol KYCGeneralFieldProtocol : TrustlessSDK.KYCBaseFieldProtocol {
  associatedtype Value
  var value: Self.Value? { get set }
  func putValue(value: Self.Value?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class KYCGenericField<T> : TrustlessSDK.KYCBaseField, TrustlessSDK.KYCGeneralFieldProtocol {
  public typealias Value = T
  public var value: T? {
    get
    set
  }
  override public func putValue(value: Any?)
  public func putValue(value: T?)
  @objc deinit
}
public struct CliQAlias : Swift.Codable {
  public var type: TrustlessSDK.CliQAliasType?
  public var value: Swift.String?
  public var startDate: Swift.String?
  public var expirationDate: Swift.String?
  public var status: Swift.String?
  public var accounts: [TrustlessSDK.CliQAliasAccount]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum CliQAliasType : Swift.String, Swift.Codable {
  case alias
  case mobl
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CliQAliasAccount : Swift.Codable {
  public var currency: Swift.String?
  public var openingDate: Swift.String?
  public var closingDate: Swift.String?
  public var iban: Swift.String?
  public var isDefault: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol KYCTextFieldProtocol : TrustlessSDK.KYCGeneralFieldProtocol {
  var keyboardType: UIKit.UIKeyboardType { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class KYCTextField : TrustlessSDK.KYCGenericField<Swift.String>, TrustlessSDK.KYCTextFieldProtocol {
  public var keyboardType: UIKit.UIKeyboardType {
    get
  }
  override public func getStringValue() -> Swift.String?
  @objc deinit
}
public struct CreateCardParams {
  public init(currencyCode: Swift.String, cardHolderName: Swift.String, mobileNumber: Swift.String, accountNumber: Swift.String? = nil, amount: Swift.Float? = 0)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct KYCStep : Swift.Codable {
  public var id: Swift.Int
  public var title: Swift.String
  public var code: Swift.String
  public var missing: Swift.Bool
  public var fields: [[Swift.String : TrustlessSDK.KYCField]]
  public var prevStep: Swift.String
  public var nextStep: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum KYCField : Swift.Codable {
  case object(TrustlessSDK.KYCFieldObject)
  case dictionary([Swift.String : TrustlessSDK.KYCFieldObject])
  case array([[Swift.String : TrustlessSDK.KYCFieldObject]])
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct KYCFieldObject : Swift.Codable {
  public var id: Swift.Int
  public var sortOrder: Swift.Int
  public var label: Swift.String
  public var labelAr: Swift.String
  public var type: TrustlessSDK.KYCFieldType
  public var value: TrustlessSDK.KYCFieldValue?
  public var readOnly: Swift.Bool
  public var source: Swift.String
  public var sourceField: Swift.String
  public var sdkMapping: [[Swift.String : Swift.String]]
  public var dependentField: [Swift.String]
  public var required: Swift.Bool
  public var validations: [TrustlessSDK.KYCFieldValidation]
  public var choiceValues: [[Swift.String : Swift.String]]
  public var choiceValuesAR: [[Swift.String : Swift.String]]
  public var requiredWhen: [TrustlessSDK.KYCFieldDependency]
  public var disabledWhen: [TrustlessSDK.KYCFieldDependency]
  public var url: Swift.String
  public var webviewUrl: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum KYCFieldType : Swift.Codable {
  case boolean
  case lov
  case integer
  case text
  case date
  case document
  case url
  case arrayOfText
  case decimal
  public init(from decoder: any Swift.Decoder) throws
  public static func == (a: TrustlessSDK.KYCFieldType, b: TrustlessSDK.KYCFieldType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
}
public enum KYCFieldValue : Swift.Codable {
  case bool(Swift.Bool)
  case string(Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct KYCFieldValidation : Swift.Codable {
  public var maxLength: Swift.String?
  public var pattern: Swift.String?
  public var boolean: Swift.String?
  public var date: Swift.String?
  public var age: Swift.String?
  public var gender: Swift.String?
  public var workType: Swift.String?
  public var minLength: Swift.String?
  public var message: Swift.String
  public var messageAr: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct KYCFieldDependency : Swift.Codable {
  public var operation: Swift.String?
  public var value: [TrustlessSDK.KYCFieldDependencyValue]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct KYCFieldDependencyValue : Swift.Codable {
  public var field: Swift.String
  public var operation: Swift.String
  public var value: [TrustlessSDK.KYCFieldValue]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetCardTransactionsParams : Swift.Codable {
  public var dateFrom: Swift.String
  public var dateTo: Swift.String
  public init(dateFrom: Foundation.Date, dateTo: Foundation.Date = Date())
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol KYCFileFieldProtocol : TrustlessSDK.KYCGeneralFieldProtocol {
  func getFiles() -> [Swift.String : Foundation.URL]?
  func getFileNames() -> [Swift.String]?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class KYCFileField : TrustlessSDK.KYCGenericField<[Foundation.URL]>, TrustlessSDK.KYCFileFieldProtocol {
  public func getFiles() -> [Swift.String : Foundation.URL]?
  public func getFileNames() -> [Swift.String]?
  @objc deinit
}
public struct AccountTransfer : Swift.Codable {
  public var date: Swift.String
  public var valueDate: Swift.String
  public var description: Swift.String
  public var debitCreditIndicator: Swift.String
  public var transactionAmount: Swift.Double
  public var transactionCurrency: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias ResultValue<Value> = Swift.Result<Value, TrustlessSDK.TrustlessError>
public typealias ResultCallback<Value> = (TrustlessSDK.ResultValue<Value>) -> Swift.Void
public enum RequestStatus {
  case none
  case inProgress
  case done
  case failed
  public static func == (a: TrustlessSDK.RequestStatus, b: TrustlessSDK.RequestStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias PaginatorResultsHandler<Element> = (TrustlessSDK.Paginator<Element>, [Element]) -> Swift.Void where Element : Swift.Decodable, Element : Swift.Encodable
public typealias PaginatorFailureHandler<Element> = (TrustlessSDK.Paginator<Element>, TrustlessSDK.TrustlessError) -> Swift.Void where Element : Swift.Decodable, Element : Swift.Encodable
@_hasMissingDesignatedInitializers public class Paginator<Element> where Element : Swift.Decodable, Element : Swift.Encodable {
  public var pageSize: Swift.Int {
    get
  }
  public var pageNumber: Swift.Int {
    get
  }
  public var total: Swift.Int {
    get
  }
  public var requestStatus: TrustlessSDK.RequestStatus {
    get
  }
  public var results: [Element] {
    get
  }
  public var currentCancelRequestCallback: TrustlessSDK.CancelCallback? {
    get
  }
  public var isLoadedAllData: Swift.Bool {
    get
  }
  public var reachedLastPage: Swift.Bool {
    get
  }
  public var resultsHandler: TrustlessSDK.PaginatorResultsHandler<Element>? {
    get
  }
  public var failureHandler: TrustlessSDK.PaginatorFailureHandler<Element>? {
    get
  }
  public func setResultsHandler(_ resultsHandler: @escaping TrustlessSDK.PaginatorResultsHandler<Element>)
  public func setFailureHandler(_ failureHandler: @escaping TrustlessSDK.PaginatorFailureHandler<Element>)
  public func fetchFirstPage(completion: @escaping TrustlessSDK.ResultCallback<[Element]>) -> TrustlessSDK.CancelCallback?
  public func fetchNextPage(completion: @escaping TrustlessSDK.ResultCallback<[Element]>) -> TrustlessSDK.CancelCallback?
  @objc deinit
}
public protocol KYCDateFieldProtocol : TrustlessSDK.KYCGeneralFieldProtocol {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class KYCDateField : TrustlessSDK.KYCGenericField<Foundation.Date>, TrustlessSDK.KYCDateFieldProtocol {
  override public func getStringValue() -> Swift.String?
  @objc deinit
}
public class Card : Swift.Codable {
  public var token: Swift.String
  public var pan: Swift.String
  public var expiryDate: Swift.String
  public var cardHolderName: Swift.String?
  public var status: Swift.String
  public var currencyCode: Swift.String
  public var currentBalance: Swift.Double
  public var blockedBalance: Swift.Double
  public var availableBalance: Swift.Double
  public var type: Swift.String
  public var secure3DEnrolled: Swift.Bool?
  public var cvv: Swift.String?
  public var mobileNumber: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct CardBalance : Swift.Codable {
  public var currencyCode: Swift.String
  public var currentBalance: Swift.Double
  public var blockedBalance: Swift.Double
  public var availableBalance: Swift.Double
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetTransfersParams : Swift.Codable {
  public init(month: Swift.Int? = nil, year: Swift.Int? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol CliQProvider {
  func getAliases(completion: @escaping TrustlessSDK.ResultCallback<[TrustlessSDK.CliQAlias]>) -> TrustlessSDK.CancelCallback
  func createAlias(for accountNumber: Swift.String, params: TrustlessSDK.CreateCliQAliasParams, completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.CreatedCliqAlias>) -> TrustlessSDK.CancelCallback
}
public struct UserProfile : Swift.Codable {
  public let username: Swift.String
  public let email: Swift.String
  public let firstName: Swift.String
  public let lastName: Swift.String
  public let phoneNumber: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias CancelCallback = () -> Swift.Void
public protocol KYCProviderDelegate : AnyObject {
  func didFinishKyc(_ provider: any TrustlessSDK.KYCProvider)
  func didApproveKyc(_ provider: any TrustlessSDK.KYCProvider)
}
public protocol KYCProvider {
  var delegate: (any TrustlessSDK.KYCProviderDelegate)? { get set }
  var isKycFinished: Swift.Bool { get }
  var isKycApproved: Swift.Bool { get }
  func getStatus(_ completion: @escaping TrustlessSDK.ResultCallback<TrustlessSDK.KYCStatus>) -> TrustlessSDK.CancelCallback
  func getSteps(_ completion: @escaping TrustlessSDK.ResultCallback<[TrustlessSDK.KYCStep]>) -> TrustlessSDK.CancelCallback
  func getStepsManager(_ completion: @escaping TrustlessSDK.ResultCallback<any TrustlessSDK.KYCStepsManagerProtocol>) -> TrustlessSDK.CancelCallback
  func getCityValues(for contryCode: Swift.String, completion: @escaping TrustlessSDK.ResultCallback<[TrustlessSDK.KYCCityValue]>) -> TrustlessSDK.CancelCallback
  func createRequest(body: Swift.String, proofDocuments: [Swift.String : TrustlessSDK.TrustlessFile], files: [Swift.String : TrustlessSDK.TrustlessFile], completion: @escaping TrustlessSDK.ResultCallback<Swift.Void>) -> TrustlessSDK.CancelCallback
  func createRequest(body: Swift.String, proofDocuments: [Swift.String : Foundation.URL], files: [Swift.String : TrustlessSDK.TrustlessFile], completion: @escaping TrustlessSDK.ResultCallback<Swift.Void>) -> TrustlessSDK.CancelCallback
  func createRequest(body: Swift.String, proofDocuments: [Swift.String : Foundation.URL], files: [Swift.String : Foundation.URL], completion: @escaping TrustlessSDK.ResultCallback<Swift.Void>) -> TrustlessSDK.CancelCallback
}
public struct CreateCliQAliasParams {
  public init(type: TrustlessSDK.CliQAliasType, value: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
}
extension TrustlessSDK.TransferType : Swift.Equatable {}
extension TrustlessSDK.TransferType : Swift.Hashable {}
extension TrustlessSDK.TransferType : Swift.RawRepresentable {}
extension TrustlessSDK.CardSpendingLimitType : Swift.Equatable {}
extension TrustlessSDK.CardSpendingLimitType : Swift.Hashable {}
extension TrustlessSDK.CardSpendingLimitType : Swift.RawRepresentable {}
extension TrustlessSDK.CreateCliQTransferParams : Swift.Encodable {}
extension TrustlessSDK.UpdateUserProfileParams : Swift.Encodable {}
extension TrustlessSDK.CardSpendingLimitPeriod : Swift.Equatable {}
extension TrustlessSDK.CardSpendingLimitPeriod : Swift.Hashable {}
extension TrustlessSDK.CardSpendingLimitPeriod : Swift.RawRepresentable {}
extension TrustlessSDK.SetCardSpendingLimitParams : Swift.Encodable {}
extension TrustlessSDK.CreateUserParams : Swift.Encodable {}
extension TrustlessSDK.CardStatus : Swift.Equatable {}
extension TrustlessSDK.CardStatus : Swift.Hashable {}
extension TrustlessSDK.CardStatus : Swift.RawRepresentable {}
extension TrustlessSDK.CreateInternalTransferParams : Swift.Encodable {}
extension TrustlessSDK.CardManageFundsParams : Swift.Encodable {}
extension TrustlessSDK.CliQAliasType : Swift.Equatable {}
extension TrustlessSDK.CliQAliasType : Swift.Hashable {}
extension TrustlessSDK.CliQAliasType : Swift.RawRepresentable {}
extension TrustlessSDK.CreateCardParams : Swift.Encodable {}
extension TrustlessSDK.KYCFieldType : Swift.Equatable {}
extension TrustlessSDK.KYCFieldType : Swift.Hashable {}
extension TrustlessSDK.RequestStatus : Swift.Equatable {}
extension TrustlessSDK.RequestStatus : Swift.Hashable {}
extension TrustlessSDK.CreateCliQAliasParams : Swift.Encodable {}
